// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/simple.dart';
import 'api/vtop/paraser/parseattn.dart';
import 'api/vtop/paraser/parsemarks.dart';
import 'api/vtop/paraser/parsesched.dart';
import 'api/vtop/paraser/parsett.dart';
import 'api/vtop/paraser/wifi_portal.dart';
import 'api/vtop/session_manager.dart';
import 'api/vtop/types.dart';
import 'api/vtop/vtop_client.dart';
import 'api/vtop/vtop_config.dart';
import 'api/vtop/vtop_errors.dart';
import 'api/vtop/wifi.dart';
import 'api/vtop_get_client.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:meta/meta.dart' as meta;

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
    bool forceSameCodegenVersion = true,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
      forceSameCodegenVersion: forceSameCodegenVersion,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required RustLibApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiSimpleInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.11.1';

  @override
  int get rustContentHash => -977274604;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'rust_lib_vitapmate',
        ioDirectory: 'rust/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  Future<void> crateApiVtopSessionManagerSessionManagerClear({
    required SessionManager that,
  });

  Future<ArcJar> crateApiVtopSessionManagerSessionManagerGetCookieStore({
    required SessionManager that,
  });

  Future<String?> crateApiVtopSessionManagerSessionManagerGetCsrfToken({
    required SessionManager that,
  });

  Future<bool> crateApiVtopSessionManagerSessionManagerIsAuthenticated({
    required SessionManager that,
  });

  Future<bool> crateApiVtopSessionManagerSessionManagerIsCookieExternal({
    required SessionManager that,
  });

  Future<SessionManager> crateApiVtopSessionManagerSessionManagerNew();

  Future<void> crateApiVtopSessionManagerSessionManagerSetAuthenticated({
    required SessionManager that,
    required bool authenticated,
  });

  Future<void> crateApiVtopSessionManagerSessionManagerSetCookieExternal({
    required SessionManager that,
    required bool bool,
  });

  Future<void> crateApiVtopSessionManagerSessionManagerSetCookieFromExternal({
    required SessionManager that,
    required String url,
    required String cookie,
  });

  Future<void> crateApiVtopSessionManagerSessionManagerSetCsrfFromExternal({
    required SessionManager that,
    required String token,
  });

  Future<void> crateApiVtopSessionManagerSessionManagerSetCsrfToken({
    required SessionManager that,
    required String token,
  });

  Future<VtopClient> crateApiVtopVtopConfigVtopClientBuilderBuild({
    required VtopClientBuilder that,
    required String username,
    required String password,
  });

  Future<VtopClientBuilder> crateApiVtopVtopConfigVtopClientBuilderNew();

  Future<VtopResultAttendanceData>
  crateApiVtopVtopClientVtopClientGetAttendance({
    required VtopClient that,
    required String semesterId,
  });

  Future<VtopResultVecU8> crateApiVtopVtopClientVtopClientGetCookie({
    required VtopClient that,
    required bool check,
  });

  Future<VtopResultExamScheduleData>
  crateApiVtopVtopClientVtopClientGetExamSchedule({
    required VtopClient that,
    required String semesterId,
  });

  Future<VtopResultFullAttendanceData>
  crateApiVtopVtopClientVtopClientGetFullAttendance({
    required VtopClient that,
    required String semesterId,
    required String courseId,
    required String courseType,
  });

  Future<VtopResultMarksData> crateApiVtopVtopClientVtopClientGetMarks({
    required VtopClient that,
    required String semesterId,
  });

  Future<VtopResultSemesterData> crateApiVtopVtopClientVtopClientGetSemesters({
    required VtopClient that,
    required bool check,
  });

  Future<VtopResultTimetableData> crateApiVtopVtopClientVtopClientGetTimetable({
    required VtopClient that,
    required String semesterId,
  });

  Future<bool> crateApiVtopVtopClientVtopClientIsAuthenticated({
    required VtopClient that,
  });

  Future<VtopResult> crateApiVtopVtopClientVtopClientLogin({
    required VtopClient that,
  });

  Future<void> crateApiVtopVtopClientVtopClientSetCookie({
    required VtopClient that,
    required String cookie,
  });

  Future<VtopClient> crateApiVtopVtopClientVtopClientWithConfig({
    required VtopConfig config,
    required SessionManager session,
    required String username,
    required String password,
  });

  Future<AttendanceData> crateApiVtopGetClientFetchAttendance({
    required VtopClient client,
    required String semesterId,
  });

  Future<Uint8List> crateApiVtopGetClientFetchCookies({
    required VtopClient client,
  });

  Future<ExamScheduleData> crateApiVtopGetClientFetchExamShedule({
    required VtopClient client,
    required String semesterId,
  });

  Future<FullAttendanceData> crateApiVtopGetClientFetchFullAttendance({
    required VtopClient client,
    required String semesterId,
    required String courseId,
    required String courseType,
  });

  Future<bool> crateApiVtopGetClientFetchIsAuth({required VtopClient client});

  Future<MarksData> crateApiVtopGetClientFetchMarks({
    required VtopClient client,
    required String semesterId,
  });

  Future<SemesterData> crateApiVtopGetClientFetchSemesters({
    required VtopClient client,
  });

  Future<TimetableData> crateApiVtopGetClientFetchTimetable({
    required VtopClient client,
    required String semesterId,
  });

  Future<(bool, String)> crateApiVtopGetClientFetchWifi({
    required String username,
    required String password,
    required int i,
  });

  Future<String> crateApiVtopParaserWifiPortalFindCaptivativePortal();

  VtopClient crateApiVtopGetClientGetVtopClient({
    required String username,
    required String password,
    String? cookie,
  });

  String crateApiSimpleGreet({required String name});

  Future<void> crateApiSimpleInitApp();

  Future<AttendanceData> crateApiVtopParaserParseattnParseAttendance({
    required String html,
    required String sem,
  });

  Future<FullAttendanceData> crateApiVtopParaserParseattnParseFullAttendance({
    required String html,
    required String sem,
    required String courseId,
    required String courseType,
  });

  Future<MarksData> crateApiVtopParaserParsemarksParseMarks({
    required String html,
    required String sem,
  });

  Future<ExamScheduleData> crateApiVtopParaserParseschedParseSchedule({
    required String html,
    required String sem,
  });

  Future<SemesterData> crateApiVtopParaserParsettParseSemidTimetable({
    required String html,
  });

  Future<TimetableData> crateApiVtopParaserParsettParseTimetable({
    required String html,
    required String sem,
  });

  Future<void> crateApiVtopGetClientVtopClientLogin({
    required VtopClient client,
  });

  Future<VtopConfig> crateApiVtopVtopConfigVtopConfigDefault();

  Future<(bool, String)> crateApiVtopWifiWifiLoginLogout({
    required int i,
    required String username,
    required String password,
  });

  Future<(bool, String)> crateApiVtopWifiWifiLoginLogoutHostel({
    required int i,
    required String username,
    required String password,
  });

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_ArcJar;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_ArcJar;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ArcJarPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_SessionManager;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_SessionManager;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_SessionManagerPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_VtopClient;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_VtopClient;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_VtopClientPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_VtopClientBuilder;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_VtopClientBuilder;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_VtopClientBuilderPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_VtopResult;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_VtopResult;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_VtopResultPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_VtopResultAttendanceData;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_VtopResultAttendanceData;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_VtopResultAttendanceDataPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_VtopResultExamScheduleData;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_VtopResultExamScheduleData;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_VtopResultExamScheduleDataPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_VtopResultFullAttendanceData;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_VtopResultFullAttendanceData;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_VtopResultFullAttendanceDataPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_VtopResultMarksData;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_VtopResultMarksData;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_VtopResultMarksDataPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_VtopResultSemesterData;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_VtopResultSemesterData;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_VtopResultSemesterDataPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_VtopResultTimetableData;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_VtopResultTimetableData;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_VtopResultTimetableDataPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_VtopResultVecU8;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_VtopResultVecU8;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_VtopResultVecU8Ptr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<void> crateApiVtopSessionManagerSessionManagerClear({
    required SessionManager that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionManager(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 1,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopSessionManagerSessionManagerClearConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopSessionManagerSessionManagerClearConstMeta =>
      const TaskConstMeta(
        debugName: "SessionManager_clear",
        argNames: ["that"],
      );

  @override
  Future<ArcJar> crateApiVtopSessionManagerSessionManagerGetCookieStore({
    required SessionManager that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionManager(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 2,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcJar,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiVtopSessionManagerSessionManagerGetCookieStoreConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiVtopSessionManagerSessionManagerGetCookieStoreConstMeta =>
      const TaskConstMeta(
        debugName: "SessionManager_get_cookie_store",
        argNames: ["that"],
      );

  @override
  Future<String?> crateApiVtopSessionManagerSessionManagerGetCsrfToken({
    required SessionManager that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionManager(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 3,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_String,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiVtopSessionManagerSessionManagerGetCsrfTokenConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiVtopSessionManagerSessionManagerGetCsrfTokenConstMeta =>
      const TaskConstMeta(
        debugName: "SessionManager_get_csrf_token",
        argNames: ["that"],
      );

  @override
  Future<bool> crateApiVtopSessionManagerSessionManagerIsAuthenticated({
    required SessionManager that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionManager(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 4,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiVtopSessionManagerSessionManagerIsAuthenticatedConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiVtopSessionManagerSessionManagerIsAuthenticatedConstMeta =>
      const TaskConstMeta(
        debugName: "SessionManager_is_authenticated",
        argNames: ["that"],
      );

  @override
  Future<bool> crateApiVtopSessionManagerSessionManagerIsCookieExternal({
    required SessionManager that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionManager(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 5,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiVtopSessionManagerSessionManagerIsCookieExternalConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiVtopSessionManagerSessionManagerIsCookieExternalConstMeta =>
      const TaskConstMeta(
        debugName: "SessionManager_is_cookie_external",
        argNames: ["that"],
      );

  @override
  Future<SessionManager> crateApiVtopSessionManagerSessionManagerNew() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 6,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionManager,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopSessionManagerSessionManagerNewConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopSessionManagerSessionManagerNewConstMeta =>
      const TaskConstMeta(debugName: "SessionManager_new", argNames: []);

  @override
  Future<void> crateApiVtopSessionManagerSessionManagerSetAuthenticated({
    required SessionManager that,
    required bool authenticated,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionManager(
            that,
            serializer,
          );
          sse_encode_bool(authenticated, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 7,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiVtopSessionManagerSessionManagerSetAuthenticatedConstMeta,
        argValues: [that, authenticated],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiVtopSessionManagerSessionManagerSetAuthenticatedConstMeta =>
      const TaskConstMeta(
        debugName: "SessionManager_set_authenticated",
        argNames: ["that", "authenticated"],
      );

  @override
  Future<void> crateApiVtopSessionManagerSessionManagerSetCookieExternal({
    required SessionManager that,
    required bool bool,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionManager(
            that,
            serializer,
          );
          sse_encode_bool(bool, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 8,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiVtopSessionManagerSessionManagerSetCookieExternalConstMeta,
        argValues: [that, bool],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiVtopSessionManagerSessionManagerSetCookieExternalConstMeta =>
      const TaskConstMeta(
        debugName: "SessionManager_set_cookie_external",
        argNames: ["that", "bool"],
      );

  @override
  Future<void> crateApiVtopSessionManagerSessionManagerSetCookieFromExternal({
    required SessionManager that,
    required String url,
    required String cookie,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionManager(
            that,
            serializer,
          );
          sse_encode_String(url, serializer);
          sse_encode_String(cookie, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 9,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiVtopSessionManagerSessionManagerSetCookieFromExternalConstMeta,
        argValues: [that, url, cookie],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiVtopSessionManagerSessionManagerSetCookieFromExternalConstMeta =>
      const TaskConstMeta(
        debugName: "SessionManager_set_cookie_from_external",
        argNames: ["that", "url", "cookie"],
      );

  @override
  Future<void> crateApiVtopSessionManagerSessionManagerSetCsrfFromExternal({
    required SessionManager that,
    required String token,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionManager(
            that,
            serializer,
          );
          sse_encode_String(token, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 10,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiVtopSessionManagerSessionManagerSetCsrfFromExternalConstMeta,
        argValues: [that, token],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiVtopSessionManagerSessionManagerSetCsrfFromExternalConstMeta =>
      const TaskConstMeta(
        debugName: "SessionManager_set_csrf_from_external",
        argNames: ["that", "token"],
      );

  @override
  Future<void> crateApiVtopSessionManagerSessionManagerSetCsrfToken({
    required SessionManager that,
    required String token,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionManager(
            that,
            serializer,
          );
          sse_encode_String(token, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 11,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiVtopSessionManagerSessionManagerSetCsrfTokenConstMeta,
        argValues: [that, token],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiVtopSessionManagerSessionManagerSetCsrfTokenConstMeta =>
      const TaskConstMeta(
        debugName: "SessionManager_set_csrf_token",
        argNames: ["that", "token"],
      );

  @override
  Future<VtopClient> crateApiVtopVtopConfigVtopClientBuilderBuild({
    required VtopClientBuilder that,
    required String username,
    required String password,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClientBuilder(
            that,
            serializer,
          );
          sse_encode_String(username, serializer);
          sse_encode_String(password, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 12,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopVtopConfigVtopClientBuilderBuildConstMeta,
        argValues: [that, username, password],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopVtopConfigVtopClientBuilderBuildConstMeta =>
      const TaskConstMeta(
        debugName: "VtopClientBuilder_build",
        argNames: ["that", "username", "password"],
      );

  @override
  Future<VtopClientBuilder> crateApiVtopVtopConfigVtopClientBuilderNew() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 13,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClientBuilder,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopVtopConfigVtopClientBuilderNewConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopVtopConfigVtopClientBuilderNewConstMeta =>
      const TaskConstMeta(debugName: "VtopClientBuilder_new", argNames: []);

  @override
  Future<VtopResultAttendanceData>
  crateApiVtopVtopClientVtopClientGetAttendance({
    required VtopClient that,
    required String semesterId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            that,
            serializer,
          );
          sse_encode_String(semesterId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 14,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultAttendanceData,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopVtopClientVtopClientGetAttendanceConstMeta,
        argValues: [that, semesterId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopVtopClientVtopClientGetAttendanceConstMeta =>
      const TaskConstMeta(
        debugName: "VtopClient_get_attendance",
        argNames: ["that", "semesterId"],
      );

  @override
  Future<VtopResultVecU8> crateApiVtopVtopClientVtopClientGetCookie({
    required VtopClient that,
    required bool check,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            that,
            serializer,
          );
          sse_encode_bool(check, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 15,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecu8,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopVtopClientVtopClientGetCookieConstMeta,
        argValues: [that, check],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopVtopClientVtopClientGetCookieConstMeta =>
      const TaskConstMeta(
        debugName: "VtopClient_get_cookie",
        argNames: ["that", "check"],
      );

  @override
  Future<VtopResultExamScheduleData>
  crateApiVtopVtopClientVtopClientGetExamSchedule({
    required VtopClient that,
    required String semesterId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            that,
            serializer,
          );
          sse_encode_String(semesterId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 16,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultExamScheduleData,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopVtopClientVtopClientGetExamScheduleConstMeta,
        argValues: [that, semesterId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopVtopClientVtopClientGetExamScheduleConstMeta =>
      const TaskConstMeta(
        debugName: "VtopClient_get_exam_schedule",
        argNames: ["that", "semesterId"],
      );

  @override
  Future<VtopResultFullAttendanceData>
  crateApiVtopVtopClientVtopClientGetFullAttendance({
    required VtopClient that,
    required String semesterId,
    required String courseId,
    required String courseType,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            that,
            serializer,
          );
          sse_encode_String(semesterId, serializer);
          sse_encode_String(courseId, serializer);
          sse_encode_String(courseType, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 17,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultFullAttendanceData,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopVtopClientVtopClientGetFullAttendanceConstMeta,
        argValues: [that, semesterId, courseId, courseType],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiVtopVtopClientVtopClientGetFullAttendanceConstMeta =>
      const TaskConstMeta(
        debugName: "VtopClient_get_full_attendance",
        argNames: ["that", "semesterId", "courseId", "courseType"],
      );

  @override
  Future<VtopResultMarksData> crateApiVtopVtopClientVtopClientGetMarks({
    required VtopClient that,
    required String semesterId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            that,
            serializer,
          );
          sse_encode_String(semesterId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 18,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultMarksData,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopVtopClientVtopClientGetMarksConstMeta,
        argValues: [that, semesterId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopVtopClientVtopClientGetMarksConstMeta =>
      const TaskConstMeta(
        debugName: "VtopClient_get_marks",
        argNames: ["that", "semesterId"],
      );

  @override
  Future<VtopResultSemesterData> crateApiVtopVtopClientVtopClientGetSemesters({
    required VtopClient that,
    required bool check,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            that,
            serializer,
          );
          sse_encode_bool(check, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 19,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultSemesterData,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopVtopClientVtopClientGetSemestersConstMeta,
        argValues: [that, check],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopVtopClientVtopClientGetSemestersConstMeta =>
      const TaskConstMeta(
        debugName: "VtopClient_get_semesters",
        argNames: ["that", "check"],
      );

  @override
  Future<VtopResultTimetableData> crateApiVtopVtopClientVtopClientGetTimetable({
    required VtopClient that,
    required String semesterId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            that,
            serializer,
          );
          sse_encode_String(semesterId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 20,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultTimetableData,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopVtopClientVtopClientGetTimetableConstMeta,
        argValues: [that, semesterId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopVtopClientVtopClientGetTimetableConstMeta =>
      const TaskConstMeta(
        debugName: "VtopClient_get_timetable",
        argNames: ["that", "semesterId"],
      );

  @override
  Future<bool> crateApiVtopVtopClientVtopClientIsAuthenticated({
    required VtopClient that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 21,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopVtopClientVtopClientIsAuthenticatedConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopVtopClientVtopClientIsAuthenticatedConstMeta =>
      const TaskConstMeta(
        debugName: "VtopClient_is_authenticated",
        argNames: ["that"],
      );

  @override
  Future<VtopResult> crateApiVtopVtopClientVtopClientLogin({
    required VtopClient that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 22,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResult,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopVtopClientVtopClientLoginConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopVtopClientVtopClientLoginConstMeta =>
      const TaskConstMeta(debugName: "VtopClient_login", argNames: ["that"]);

  @override
  Future<void> crateApiVtopVtopClientVtopClientSetCookie({
    required VtopClient that,
    required String cookie,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            that,
            serializer,
          );
          sse_encode_String(cookie, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 23,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopVtopClientVtopClientSetCookieConstMeta,
        argValues: [that, cookie],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopVtopClientVtopClientSetCookieConstMeta =>
      const TaskConstMeta(
        debugName: "VtopClient_set_cookie",
        argNames: ["that", "cookie"],
      );

  @override
  Future<VtopClient> crateApiVtopVtopClientVtopClientWithConfig({
    required VtopConfig config,
    required SessionManager session,
    required String username,
    required String password,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_vtop_config(config, serializer);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionManager(
            session,
            serializer,
          );
          sse_encode_String(username, serializer);
          sse_encode_String(password, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 24,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopVtopClientVtopClientWithConfigConstMeta,
        argValues: [config, session, username, password],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopVtopClientVtopClientWithConfigConstMeta =>
      const TaskConstMeta(
        debugName: "VtopClient_with_config",
        argNames: ["config", "session", "username", "password"],
      );

  @override
  Future<AttendanceData> crateApiVtopGetClientFetchAttendance({
    required VtopClient client,
    required String semesterId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            client,
            serializer,
          );
          sse_encode_String(semesterId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 25,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_attendance_data,
          decodeErrorData: sse_decode_vtop_error,
        ),
        constMeta: kCrateApiVtopGetClientFetchAttendanceConstMeta,
        argValues: [client, semesterId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopGetClientFetchAttendanceConstMeta =>
      const TaskConstMeta(
        debugName: "fetch_attendance",
        argNames: ["client", "semesterId"],
      );

  @override
  Future<Uint8List> crateApiVtopGetClientFetchCookies({
    required VtopClient client,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            client,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 26,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_prim_u_8_strict,
          decodeErrorData: sse_decode_vtop_error,
        ),
        constMeta: kCrateApiVtopGetClientFetchCookiesConstMeta,
        argValues: [client],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopGetClientFetchCookiesConstMeta =>
      const TaskConstMeta(debugName: "fetch_cookies", argNames: ["client"]);

  @override
  Future<ExamScheduleData> crateApiVtopGetClientFetchExamShedule({
    required VtopClient client,
    required String semesterId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            client,
            serializer,
          );
          sse_encode_String(semesterId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 27,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_exam_schedule_data,
          decodeErrorData: sse_decode_vtop_error,
        ),
        constMeta: kCrateApiVtopGetClientFetchExamSheduleConstMeta,
        argValues: [client, semesterId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopGetClientFetchExamSheduleConstMeta =>
      const TaskConstMeta(
        debugName: "fetch_exam_shedule",
        argNames: ["client", "semesterId"],
      );

  @override
  Future<FullAttendanceData> crateApiVtopGetClientFetchFullAttendance({
    required VtopClient client,
    required String semesterId,
    required String courseId,
    required String courseType,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            client,
            serializer,
          );
          sse_encode_String(semesterId, serializer);
          sse_encode_String(courseId, serializer);
          sse_encode_String(courseType, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 28,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_full_attendance_data,
          decodeErrorData: sse_decode_vtop_error,
        ),
        constMeta: kCrateApiVtopGetClientFetchFullAttendanceConstMeta,
        argValues: [client, semesterId, courseId, courseType],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopGetClientFetchFullAttendanceConstMeta =>
      const TaskConstMeta(
        debugName: "fetch_full_attendance",
        argNames: ["client", "semesterId", "courseId", "courseType"],
      );

  @override
  Future<bool> crateApiVtopGetClientFetchIsAuth({required VtopClient client}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            client,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 29,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopGetClientFetchIsAuthConstMeta,
        argValues: [client],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopGetClientFetchIsAuthConstMeta =>
      const TaskConstMeta(debugName: "fetch_is_auth", argNames: ["client"]);

  @override
  Future<MarksData> crateApiVtopGetClientFetchMarks({
    required VtopClient client,
    required String semesterId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            client,
            serializer,
          );
          sse_encode_String(semesterId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 30,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_marks_data,
          decodeErrorData: sse_decode_vtop_error,
        ),
        constMeta: kCrateApiVtopGetClientFetchMarksConstMeta,
        argValues: [client, semesterId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopGetClientFetchMarksConstMeta =>
      const TaskConstMeta(
        debugName: "fetch_marks",
        argNames: ["client", "semesterId"],
      );

  @override
  Future<SemesterData> crateApiVtopGetClientFetchSemesters({
    required VtopClient client,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            client,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 31,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_semester_data,
          decodeErrorData: sse_decode_vtop_error,
        ),
        constMeta: kCrateApiVtopGetClientFetchSemestersConstMeta,
        argValues: [client],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopGetClientFetchSemestersConstMeta =>
      const TaskConstMeta(debugName: "fetch_semesters", argNames: ["client"]);

  @override
  Future<TimetableData> crateApiVtopGetClientFetchTimetable({
    required VtopClient client,
    required String semesterId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            client,
            serializer,
          );
          sse_encode_String(semesterId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 32,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_timetable_data,
          decodeErrorData: sse_decode_vtop_error,
        ),
        constMeta: kCrateApiVtopGetClientFetchTimetableConstMeta,
        argValues: [client, semesterId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopGetClientFetchTimetableConstMeta =>
      const TaskConstMeta(
        debugName: "fetch_timetable",
        argNames: ["client", "semesterId"],
      );

  @override
  Future<(bool, String)> crateApiVtopGetClientFetchWifi({
    required String username,
    required String password,
    required int i,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(username, serializer);
          sse_encode_String(password, serializer);
          sse_encode_i_32(i, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 33,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_record_bool_string,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopGetClientFetchWifiConstMeta,
        argValues: [username, password, i],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopGetClientFetchWifiConstMeta =>
      const TaskConstMeta(
        debugName: "fetch_wifi",
        argNames: ["username", "password", "i"],
      );

  @override
  Future<String> crateApiVtopParaserWifiPortalFindCaptivativePortal() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 34,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopParaserWifiPortalFindCaptivativePortalConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiVtopParaserWifiPortalFindCaptivativePortalConstMeta =>
      const TaskConstMeta(debugName: "find_captivative_portal", argNames: []);

  @override
  VtopClient crateApiVtopGetClientGetVtopClient({
    required String username,
    required String password,
    String? cookie,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(username, serializer);
          sse_encode_String(password, serializer);
          sse_encode_opt_String(cookie, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 35)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopGetClientGetVtopClientConstMeta,
        argValues: [username, password, cookie],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopGetClientGetVtopClientConstMeta =>
      const TaskConstMeta(
        debugName: "get_vtop_client",
        argNames: ["username", "password", "cookie"],
      );

  @override
  String crateApiSimpleGreet({required String name}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(name, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 36)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleGreetConstMeta,
        argValues: [name],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleGreetConstMeta =>
      const TaskConstMeta(debugName: "greet", argNames: ["name"]);

  @override
  Future<void> crateApiSimpleInitApp() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 37,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleInitAppConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleInitAppConstMeta =>
      const TaskConstMeta(debugName: "init_app", argNames: []);

  @override
  Future<AttendanceData> crateApiVtopParaserParseattnParseAttendance({
    required String html,
    required String sem,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(html, serializer);
          sse_encode_String(sem, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 38,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_attendance_data,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopParaserParseattnParseAttendanceConstMeta,
        argValues: [html, sem],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopParaserParseattnParseAttendanceConstMeta =>
      const TaskConstMeta(
        debugName: "parse_attendance",
        argNames: ["html", "sem"],
      );

  @override
  Future<FullAttendanceData> crateApiVtopParaserParseattnParseFullAttendance({
    required String html,
    required String sem,
    required String courseId,
    required String courseType,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(html, serializer);
          sse_encode_String(sem, serializer);
          sse_encode_String(courseId, serializer);
          sse_encode_String(courseType, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 39,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_full_attendance_data,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopParaserParseattnParseFullAttendanceConstMeta,
        argValues: [html, sem, courseId, courseType],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopParaserParseattnParseFullAttendanceConstMeta =>
      const TaskConstMeta(
        debugName: "parse_full_attendance",
        argNames: ["html", "sem", "courseId", "courseType"],
      );

  @override
  Future<MarksData> crateApiVtopParaserParsemarksParseMarks({
    required String html,
    required String sem,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(html, serializer);
          sse_encode_String(sem, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 40,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_marks_data,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopParaserParsemarksParseMarksConstMeta,
        argValues: [html, sem],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopParaserParsemarksParseMarksConstMeta =>
      const TaskConstMeta(debugName: "parse_marks", argNames: ["html", "sem"]);

  @override
  Future<ExamScheduleData> crateApiVtopParaserParseschedParseSchedule({
    required String html,
    required String sem,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(html, serializer);
          sse_encode_String(sem, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 41,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_exam_schedule_data,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopParaserParseschedParseScheduleConstMeta,
        argValues: [html, sem],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopParaserParseschedParseScheduleConstMeta =>
      const TaskConstMeta(
        debugName: "parse_schedule",
        argNames: ["html", "sem"],
      );

  @override
  Future<SemesterData> crateApiVtopParaserParsettParseSemidTimetable({
    required String html,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(html, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 42,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_semester_data,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopParaserParsettParseSemidTimetableConstMeta,
        argValues: [html],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopParaserParsettParseSemidTimetableConstMeta =>
      const TaskConstMeta(
        debugName: "parse_semid_timetable",
        argNames: ["html"],
      );

  @override
  Future<TimetableData> crateApiVtopParaserParsettParseTimetable({
    required String html,
    required String sem,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(html, serializer);
          sse_encode_String(sem, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 43,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_timetable_data,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopParaserParsettParseTimetableConstMeta,
        argValues: [html, sem],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopParaserParsettParseTimetableConstMeta =>
      const TaskConstMeta(
        debugName: "parse_timetable",
        argNames: ["html", "sem"],
      );

  @override
  Future<void> crateApiVtopGetClientVtopClientLogin({
    required VtopClient client,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            client,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 44,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_vtop_error,
        ),
        constMeta: kCrateApiVtopGetClientVtopClientLoginConstMeta,
        argValues: [client],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopGetClientVtopClientLoginConstMeta =>
      const TaskConstMeta(debugName: "vtop_client_login", argNames: ["client"]);

  @override
  Future<VtopConfig> crateApiVtopVtopConfigVtopConfigDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 45,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_vtop_config,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopVtopConfigVtopConfigDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopVtopConfigVtopConfigDefaultConstMeta =>
      const TaskConstMeta(debugName: "vtop_config_default", argNames: []);

  @override
  Future<(bool, String)> crateApiVtopWifiWifiLoginLogout({
    required int i,
    required String username,
    required String password,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_i_32(i, serializer);
          sse_encode_String(username, serializer);
          sse_encode_String(password, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 46,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_record_bool_string,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopWifiWifiLoginLogoutConstMeta,
        argValues: [i, username, password],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopWifiWifiLoginLogoutConstMeta =>
      const TaskConstMeta(
        debugName: "wifi_login_logout",
        argNames: ["i", "username", "password"],
      );

  @override
  Future<(bool, String)> crateApiVtopWifiWifiLoginLogoutHostel({
    required int i,
    required String username,
    required String password,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_i_32(i, serializer);
          sse_encode_String(username, serializer);
          sse_encode_String(password, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 47,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_record_bool_string,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopWifiWifiLoginLogoutHostelConstMeta,
        argValues: [i, username, password],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopWifiWifiLoginLogoutHostelConstMeta =>
      const TaskConstMeta(
        debugName: "wifi_login_logout_hostel",
        argNames: ["i", "username", "password"],
      );

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ArcJar =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcJar;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ArcJar =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcJar;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_SessionManager =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionManager;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_SessionManager =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionManager;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_VtopClient =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_VtopClient =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_VtopClientBuilder =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClientBuilder;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_VtopClientBuilder =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClientBuilder;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_VtopResult =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResult;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_VtopResult =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResult;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_VtopResultAttendanceData =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultAttendanceData;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_VtopResultAttendanceData =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultAttendanceData;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_VtopResultExamScheduleData =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultExamScheduleData;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_VtopResultExamScheduleData =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultExamScheduleData;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_VtopResultFullAttendanceData =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultFullAttendanceData;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_VtopResultFullAttendanceData =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultFullAttendanceData;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_VtopResultMarksData =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultMarksData;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_VtopResultMarksData =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultMarksData;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_VtopResultSemesterData =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultSemesterData;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_VtopResultSemesterData =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultSemesterData;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_VtopResultTimetableData =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultTimetableData;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_VtopResultTimetableData =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultTimetableData;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_VtopResultVecU8 =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecu8;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_VtopResultVecU8 =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecu8;

  @protected
  ArcJar
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcJar(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcJarImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SessionManager
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionManager(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SessionManagerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  VtopClient
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  VtopClientBuilder
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClientBuilder(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopClientBuilderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  VtopResult
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResult(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopResultImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  VtopResultAttendanceData
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultAttendanceData(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopResultAttendanceDataImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  VtopResultExamScheduleData
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultExamScheduleData(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopResultExamScheduleDataImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  VtopResultFullAttendanceData
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultFullAttendanceData(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopResultFullAttendanceDataImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  VtopResultMarksData
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultMarksData(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopResultMarksDataImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  VtopResultSemesterData
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultSemesterData(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopResultSemesterDataImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  VtopResultTimetableData
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultTimetableData(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopResultTimetableDataImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  VtopResultVecU8
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecu8(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopResultVecU8Impl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SessionManager
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionManager(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SessionManagerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  VtopClient
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SessionManager
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionManager(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SessionManagerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  VtopClient
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ArcJar
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcJar(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcJarImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SessionManager
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionManager(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SessionManagerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  VtopClient
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  VtopClientBuilder
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClientBuilder(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopClientBuilderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  VtopResult
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResult(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopResultImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  VtopResultAttendanceData
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultAttendanceData(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopResultAttendanceDataImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  VtopResultExamScheduleData
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultExamScheduleData(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopResultExamScheduleDataImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  VtopResultFullAttendanceData
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultFullAttendanceData(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopResultFullAttendanceDataImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  VtopResultMarksData
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultMarksData(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopResultMarksDataImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  VtopResultSemesterData
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultSemesterData(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopResultSemesterDataImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  VtopResultTimetableData
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultTimetableData(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopResultTimetableDataImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  VtopResultVecU8
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecu8(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopResultVecU8Impl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  AttendanceData dco_decode_attendance_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return AttendanceData(
      records: dco_decode_list_attendance_record(arr[0]),
      semesterId: dco_decode_String(arr[1]),
      updateTime: dco_decode_u_64(arr[2]),
    );
  }

  @protected
  AttendanceRecord dco_decode_attendance_record(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 12)
      throw Exception('unexpected arr length: expect 12 but see ${arr.length}');
    return AttendanceRecord(
      serial: dco_decode_String(arr[0]),
      category: dco_decode_String(arr[1]),
      courseName: dco_decode_String(arr[2]),
      courseCode: dco_decode_String(arr[3]),
      courseType: dco_decode_String(arr[4]),
      facultyDetail: dco_decode_String(arr[5]),
      classesAttended: dco_decode_String(arr[6]),
      totalClasses: dco_decode_String(arr[7]),
      attendancePercentage: dco_decode_String(arr[8]),
      attendenceFatCat: dco_decode_String(arr[9]),
      debarStatus: dco_decode_String(arr[10]),
      courseId: dco_decode_String(arr[11]),
    );
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  bool dco_decode_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  VtopConfig dco_decode_box_autoadd_vtop_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_vtop_config(raw);
  }

  @protected
  ExamScheduleData dco_decode_exam_schedule_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ExamScheduleData(
      exams: dco_decode_list_per_exam_schedule_record(arr[0]),
      semesterId: dco_decode_String(arr[1]),
      updateTime: dco_decode_u_64(arr[2]),
    );
  }

  @protected
  ExamScheduleRecord dco_decode_exam_schedule_record(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 13)
      throw Exception('unexpected arr length: expect 13 but see ${arr.length}');
    return ExamScheduleRecord(
      serial: dco_decode_String(arr[0]),
      slot: dco_decode_String(arr[1]),
      courseName: dco_decode_String(arr[2]),
      courseCode: dco_decode_String(arr[3]),
      courseType: dco_decode_String(arr[4]),
      courseId: dco_decode_String(arr[5]),
      examDate: dco_decode_String(arr[6]),
      examSession: dco_decode_String(arr[7]),
      reportingTime: dco_decode_String(arr[8]),
      examTime: dco_decode_String(arr[9]),
      venue: dco_decode_String(arr[10]),
      seatLocation: dco_decode_String(arr[11]),
      seatNo: dco_decode_String(arr[12]),
    );
  }

  @protected
  FullAttendanceData dco_decode_full_attendance_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return FullAttendanceData(
      records: dco_decode_list_full_attendance_record(arr[0]),
      semesterId: dco_decode_String(arr[1]),
      updateTime: dco_decode_u_64(arr[2]),
      courseId: dco_decode_String(arr[3]),
      courseType: dco_decode_String(arr[4]),
    );
  }

  @protected
  FullAttendanceRecord dco_decode_full_attendance_record(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return FullAttendanceRecord(
      serial: dco_decode_String(arr[0]),
      date: dco_decode_String(arr[1]),
      slot: dco_decode_String(arr[2]),
      dayTime: dco_decode_String(arr[3]),
      status: dco_decode_String(arr[4]),
      remark: dco_decode_String(arr[5]),
    );
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  List<AttendanceRecord> dco_decode_list_attendance_record(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_attendance_record).toList();
  }

  @protected
  List<ExamScheduleRecord> dco_decode_list_exam_schedule_record(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_exam_schedule_record).toList();
  }

  @protected
  List<FullAttendanceRecord> dco_decode_list_full_attendance_record(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_full_attendance_record)
        .toList();
  }

  @protected
  List<MarksRecord> dco_decode_list_marks_record(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_marks_record).toList();
  }

  @protected
  List<MarksRecordEach> dco_decode_list_marks_record_each(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_marks_record_each).toList();
  }

  @protected
  List<PerExamScheduleRecord> dco_decode_list_per_exam_schedule_record(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_per_exam_schedule_record)
        .toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<SemesterInfo> dco_decode_list_semester_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_semester_info).toList();
  }

  @protected
  List<TimetableSlot> dco_decode_list_timetable_slot(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_timetable_slot).toList();
  }

  @protected
  MarksData dco_decode_marks_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return MarksData(
      records: dco_decode_list_marks_record(arr[0]),
      semesterId: dco_decode_String(arr[1]),
      updateTime: dco_decode_u_64(arr[2]),
    );
  }

  @protected
  MarksRecord dco_decode_marks_record(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return MarksRecord(
      serial: dco_decode_String(arr[0]),
      coursecode: dco_decode_String(arr[1]),
      coursetitle: dco_decode_String(arr[2]),
      coursetype: dco_decode_String(arr[3]),
      faculity: dco_decode_String(arr[4]),
      slot: dco_decode_String(arr[5]),
      marks: dco_decode_list_marks_record_each(arr[6]),
    );
  }

  @protected
  MarksRecordEach dco_decode_marks_record_each(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 8)
      throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return MarksRecordEach(
      serial: dco_decode_String(arr[0]),
      markstitle: dco_decode_String(arr[1]),
      maxmarks: dco_decode_String(arr[2]),
      weightage: dco_decode_String(arr[3]),
      status: dco_decode_String(arr[4]),
      scoredmark: dco_decode_String(arr[5]),
      weightagemark: dco_decode_String(arr[6]),
      remark: dco_decode_String(arr[7]),
    );
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  bool? dco_decode_opt_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_bool(raw);
  }

  @protected
  PerExamScheduleRecord dco_decode_per_exam_schedule_record(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return PerExamScheduleRecord(
      records: dco_decode_list_exam_schedule_record(arr[0]),
      examType: dco_decode_String(arr[1]),
    );
  }

  @protected
  (bool, String) dco_decode_record_bool_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (dco_decode_bool(arr[0]), dco_decode_String(arr[1]));
  }

  @protected
  SemesterData dco_decode_semester_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return SemesterData(
      semesters: dco_decode_list_semester_info(arr[0]),
      updateTime: dco_decode_u_64(arr[1]),
    );
  }

  @protected
  SemesterInfo dco_decode_semester_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return SemesterInfo(
      id: dco_decode_String(arr[0]),
      name: dco_decode_String(arr[1]),
    );
  }

  @protected
  TimetableData dco_decode_timetable_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return TimetableData(
      slots: dco_decode_list_timetable_slot(arr[0]),
      semesterId: dco_decode_String(arr[1]),
      updateTime: dco_decode_u_64(arr[2]),
    );
  }

  @protected
  TimetableSlot dco_decode_timetable_slot(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 11)
      throw Exception('unexpected arr length: expect 11 but see ${arr.length}');
    return TimetableSlot(
      serial: dco_decode_String(arr[0]),
      day: dco_decode_String(arr[1]),
      slot: dco_decode_String(arr[2]),
      courseCode: dco_decode_String(arr[3]),
      courseType: dco_decode_String(arr[4]),
      roomNo: dco_decode_String(arr[5]),
      block: dco_decode_String(arr[6]),
      startTime: dco_decode_String(arr[7]),
      endTime: dco_decode_String(arr[8]),
      name: dco_decode_String(arr[9]),
      isLab: dco_decode_opt_box_autoadd_bool(arr[10]),
    );
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  VtopConfig dco_decode_vtop_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return VtopConfig(
      baseUrl: dco_decode_String(arr[0]),
      timeoutSeconds: dco_decode_u_64(arr[1]),
      userAgent: dco_decode_String(arr[2]),
    );
  }

  @protected
  VtopError dco_decode_vtop_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return VtopError_NetworkError();
      case 1:
        return VtopError_VtopServerError();
      case 2:
        return VtopError_AuthenticationFailed(dco_decode_String(raw[1]));
      case 3:
        return VtopError_RegistrationParsingError();
      case 4:
        return VtopError_InvalidCredentials();
      case 5:
        return VtopError_SessionExpired();
      case 6:
        return VtopError_ParseError(dco_decode_String(raw[1]));
      case 7:
        return VtopError_ConfigurationError(dco_decode_String(raw[1]));
      case 8:
        return VtopError_CaptchaRequired();
      case 9:
        return VtopError_InvalidResponse();
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  ArcJar
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcJar(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcJarImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  SessionManager
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionManager(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SessionManagerImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  VtopClient
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopClientImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  VtopClientBuilder
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClientBuilder(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopClientBuilderImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  VtopResult
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResult(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopResultImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  VtopResultAttendanceData
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultAttendanceData(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopResultAttendanceDataImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  VtopResultExamScheduleData
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultExamScheduleData(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopResultExamScheduleDataImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  VtopResultFullAttendanceData
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultFullAttendanceData(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopResultFullAttendanceDataImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  VtopResultMarksData
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultMarksData(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopResultMarksDataImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  VtopResultSemesterData
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultSemesterData(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopResultSemesterDataImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  VtopResultTimetableData
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultTimetableData(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopResultTimetableDataImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  VtopResultVecU8
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecu8(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopResultVecU8Impl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  SessionManager
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionManager(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SessionManagerImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  VtopClient
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopClientImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  SessionManager
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionManager(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SessionManagerImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  VtopClient
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopClientImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ArcJar
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcJar(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcJarImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  SessionManager
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionManager(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SessionManagerImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  VtopClient
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopClientImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  VtopClientBuilder
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClientBuilder(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopClientBuilderImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  VtopResult
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResult(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopResultImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  VtopResultAttendanceData
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultAttendanceData(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopResultAttendanceDataImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  VtopResultExamScheduleData
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultExamScheduleData(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopResultExamScheduleDataImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  VtopResultFullAttendanceData
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultFullAttendanceData(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopResultFullAttendanceDataImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  VtopResultMarksData
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultMarksData(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopResultMarksDataImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  VtopResultSemesterData
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultSemesterData(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopResultSemesterDataImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  VtopResultTimetableData
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultTimetableData(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopResultTimetableDataImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  VtopResultVecU8
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecu8(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopResultVecU8Impl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  AttendanceData sse_decode_attendance_data(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_records = sse_decode_list_attendance_record(deserializer);
    var var_semesterId = sse_decode_String(deserializer);
    var var_updateTime = sse_decode_u_64(deserializer);
    return AttendanceData(
      records: var_records,
      semesterId: var_semesterId,
      updateTime: var_updateTime,
    );
  }

  @protected
  AttendanceRecord sse_decode_attendance_record(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_serial = sse_decode_String(deserializer);
    var var_category = sse_decode_String(deserializer);
    var var_courseName = sse_decode_String(deserializer);
    var var_courseCode = sse_decode_String(deserializer);
    var var_courseType = sse_decode_String(deserializer);
    var var_facultyDetail = sse_decode_String(deserializer);
    var var_classesAttended = sse_decode_String(deserializer);
    var var_totalClasses = sse_decode_String(deserializer);
    var var_attendancePercentage = sse_decode_String(deserializer);
    var var_attendenceFatCat = sse_decode_String(deserializer);
    var var_debarStatus = sse_decode_String(deserializer);
    var var_courseId = sse_decode_String(deserializer);
    return AttendanceRecord(
      serial: var_serial,
      category: var_category,
      courseName: var_courseName,
      courseCode: var_courseCode,
      courseType: var_courseType,
      facultyDetail: var_facultyDetail,
      classesAttended: var_classesAttended,
      totalClasses: var_totalClasses,
      attendancePercentage: var_attendancePercentage,
      attendenceFatCat: var_attendenceFatCat,
      debarStatus: var_debarStatus,
      courseId: var_courseId,
    );
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  bool sse_decode_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_bool(deserializer));
  }

  @protected
  VtopConfig sse_decode_box_autoadd_vtop_config(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_vtop_config(deserializer));
  }

  @protected
  ExamScheduleData sse_decode_exam_schedule_data(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_exams = sse_decode_list_per_exam_schedule_record(deserializer);
    var var_semesterId = sse_decode_String(deserializer);
    var var_updateTime = sse_decode_u_64(deserializer);
    return ExamScheduleData(
      exams: var_exams,
      semesterId: var_semesterId,
      updateTime: var_updateTime,
    );
  }

  @protected
  ExamScheduleRecord sse_decode_exam_schedule_record(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_serial = sse_decode_String(deserializer);
    var var_slot = sse_decode_String(deserializer);
    var var_courseName = sse_decode_String(deserializer);
    var var_courseCode = sse_decode_String(deserializer);
    var var_courseType = sse_decode_String(deserializer);
    var var_courseId = sse_decode_String(deserializer);
    var var_examDate = sse_decode_String(deserializer);
    var var_examSession = sse_decode_String(deserializer);
    var var_reportingTime = sse_decode_String(deserializer);
    var var_examTime = sse_decode_String(deserializer);
    var var_venue = sse_decode_String(deserializer);
    var var_seatLocation = sse_decode_String(deserializer);
    var var_seatNo = sse_decode_String(deserializer);
    return ExamScheduleRecord(
      serial: var_serial,
      slot: var_slot,
      courseName: var_courseName,
      courseCode: var_courseCode,
      courseType: var_courseType,
      courseId: var_courseId,
      examDate: var_examDate,
      examSession: var_examSession,
      reportingTime: var_reportingTime,
      examTime: var_examTime,
      venue: var_venue,
      seatLocation: var_seatLocation,
      seatNo: var_seatNo,
    );
  }

  @protected
  FullAttendanceData sse_decode_full_attendance_data(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_records = sse_decode_list_full_attendance_record(deserializer);
    var var_semesterId = sse_decode_String(deserializer);
    var var_updateTime = sse_decode_u_64(deserializer);
    var var_courseId = sse_decode_String(deserializer);
    var var_courseType = sse_decode_String(deserializer);
    return FullAttendanceData(
      records: var_records,
      semesterId: var_semesterId,
      updateTime: var_updateTime,
      courseId: var_courseId,
      courseType: var_courseType,
    );
  }

  @protected
  FullAttendanceRecord sse_decode_full_attendance_record(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_serial = sse_decode_String(deserializer);
    var var_date = sse_decode_String(deserializer);
    var var_slot = sse_decode_String(deserializer);
    var var_dayTime = sse_decode_String(deserializer);
    var var_status = sse_decode_String(deserializer);
    var var_remark = sse_decode_String(deserializer);
    return FullAttendanceRecord(
      serial: var_serial,
      date: var_date,
      slot: var_slot,
      dayTime: var_dayTime,
      status: var_status,
      remark: var_remark,
    );
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  List<AttendanceRecord> sse_decode_list_attendance_record(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <AttendanceRecord>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_attendance_record(deserializer));
    }
    return ans_;
  }

  @protected
  List<ExamScheduleRecord> sse_decode_list_exam_schedule_record(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ExamScheduleRecord>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_exam_schedule_record(deserializer));
    }
    return ans_;
  }

  @protected
  List<FullAttendanceRecord> sse_decode_list_full_attendance_record(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <FullAttendanceRecord>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_full_attendance_record(deserializer));
    }
    return ans_;
  }

  @protected
  List<MarksRecord> sse_decode_list_marks_record(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <MarksRecord>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_marks_record(deserializer));
    }
    return ans_;
  }

  @protected
  List<MarksRecordEach> sse_decode_list_marks_record_each(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <MarksRecordEach>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_marks_record_each(deserializer));
    }
    return ans_;
  }

  @protected
  List<PerExamScheduleRecord> sse_decode_list_per_exam_schedule_record(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <PerExamScheduleRecord>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_per_exam_schedule_record(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<SemesterInfo> sse_decode_list_semester_info(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <SemesterInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_semester_info(deserializer));
    }
    return ans_;
  }

  @protected
  List<TimetableSlot> sse_decode_list_timetable_slot(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TimetableSlot>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_timetable_slot(deserializer));
    }
    return ans_;
  }

  @protected
  MarksData sse_decode_marks_data(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_records = sse_decode_list_marks_record(deserializer);
    var var_semesterId = sse_decode_String(deserializer);
    var var_updateTime = sse_decode_u_64(deserializer);
    return MarksData(
      records: var_records,
      semesterId: var_semesterId,
      updateTime: var_updateTime,
    );
  }

  @protected
  MarksRecord sse_decode_marks_record(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_serial = sse_decode_String(deserializer);
    var var_coursecode = sse_decode_String(deserializer);
    var var_coursetitle = sse_decode_String(deserializer);
    var var_coursetype = sse_decode_String(deserializer);
    var var_faculity = sse_decode_String(deserializer);
    var var_slot = sse_decode_String(deserializer);
    var var_marks = sse_decode_list_marks_record_each(deserializer);
    return MarksRecord(
      serial: var_serial,
      coursecode: var_coursecode,
      coursetitle: var_coursetitle,
      coursetype: var_coursetype,
      faculity: var_faculity,
      slot: var_slot,
      marks: var_marks,
    );
  }

  @protected
  MarksRecordEach sse_decode_marks_record_each(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_serial = sse_decode_String(deserializer);
    var var_markstitle = sse_decode_String(deserializer);
    var var_maxmarks = sse_decode_String(deserializer);
    var var_weightage = sse_decode_String(deserializer);
    var var_status = sse_decode_String(deserializer);
    var var_scoredmark = sse_decode_String(deserializer);
    var var_weightagemark = sse_decode_String(deserializer);
    var var_remark = sse_decode_String(deserializer);
    return MarksRecordEach(
      serial: var_serial,
      markstitle: var_markstitle,
      maxmarks: var_maxmarks,
      weightage: var_weightage,
      status: var_status,
      scoredmark: var_scoredmark,
      weightagemark: var_weightagemark,
      remark: var_remark,
    );
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  bool? sse_decode_opt_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_bool(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PerExamScheduleRecord sse_decode_per_exam_schedule_record(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_records = sse_decode_list_exam_schedule_record(deserializer);
    var var_examType = sse_decode_String(deserializer);
    return PerExamScheduleRecord(records: var_records, examType: var_examType);
  }

  @protected
  (bool, String) sse_decode_record_bool_string(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_bool(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  SemesterData sse_decode_semester_data(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_semesters = sse_decode_list_semester_info(deserializer);
    var var_updateTime = sse_decode_u_64(deserializer);
    return SemesterData(semesters: var_semesters, updateTime: var_updateTime);
  }

  @protected
  SemesterInfo sse_decode_semester_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_name = sse_decode_String(deserializer);
    return SemesterInfo(id: var_id, name: var_name);
  }

  @protected
  TimetableData sse_decode_timetable_data(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_slots = sse_decode_list_timetable_slot(deserializer);
    var var_semesterId = sse_decode_String(deserializer);
    var var_updateTime = sse_decode_u_64(deserializer);
    return TimetableData(
      slots: var_slots,
      semesterId: var_semesterId,
      updateTime: var_updateTime,
    );
  }

  @protected
  TimetableSlot sse_decode_timetable_slot(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_serial = sse_decode_String(deserializer);
    var var_day = sse_decode_String(deserializer);
    var var_slot = sse_decode_String(deserializer);
    var var_courseCode = sse_decode_String(deserializer);
    var var_courseType = sse_decode_String(deserializer);
    var var_roomNo = sse_decode_String(deserializer);
    var var_block = sse_decode_String(deserializer);
    var var_startTime = sse_decode_String(deserializer);
    var var_endTime = sse_decode_String(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_isLab = sse_decode_opt_box_autoadd_bool(deserializer);
    return TimetableSlot(
      serial: var_serial,
      day: var_day,
      slot: var_slot,
      courseCode: var_courseCode,
      courseType: var_courseType,
      roomNo: var_roomNo,
      block: var_block,
      startTime: var_startTime,
      endTime: var_endTime,
      name: var_name,
      isLab: var_isLab,
    );
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  VtopConfig sse_decode_vtop_config(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_baseUrl = sse_decode_String(deserializer);
    var var_timeoutSeconds = sse_decode_u_64(deserializer);
    var var_userAgent = sse_decode_String(deserializer);
    return VtopConfig(
      baseUrl: var_baseUrl,
      timeoutSeconds: var_timeoutSeconds,
      userAgent: var_userAgent,
    );
  }

  @protected
  VtopError sse_decode_vtop_error(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return VtopError_NetworkError();
      case 1:
        return VtopError_VtopServerError();
      case 2:
        var var_field0 = sse_decode_String(deserializer);
        return VtopError_AuthenticationFailed(var_field0);
      case 3:
        return VtopError_RegistrationParsingError();
      case 4:
        return VtopError_InvalidCredentials();
      case 5:
        return VtopError_SessionExpired();
      case 6:
        var var_field0 = sse_decode_String(deserializer);
        return VtopError_ParseError(var_field0);
      case 7:
        var var_field0 = sse_decode_String(deserializer);
        return VtopError_ConfigurationError(var_field0);
      case 8:
        return VtopError_CaptchaRequired();
      case 9:
        return VtopError_InvalidResponse();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcJar(
    ArcJar self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ArcJarImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionManager(
    SessionManager self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SessionManagerImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
    VtopClient self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as VtopClientImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClientBuilder(
    VtopClientBuilder self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as VtopClientBuilderImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResult(
    VtopResult self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as VtopResultImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultAttendanceData(
    VtopResultAttendanceData self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as VtopResultAttendanceDataImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultExamScheduleData(
    VtopResultExamScheduleData self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as VtopResultExamScheduleDataImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultFullAttendanceData(
    VtopResultFullAttendanceData self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as VtopResultFullAttendanceDataImpl).frbInternalSseEncode(
        move: true,
      ),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultMarksData(
    VtopResultMarksData self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as VtopResultMarksDataImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultSemesterData(
    VtopResultSemesterData self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as VtopResultSemesterDataImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultTimetableData(
    VtopResultTimetableData self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as VtopResultTimetableDataImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecu8(
    VtopResultVecU8 self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as VtopResultVecU8Impl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionManager(
    SessionManager self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SessionManagerImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
    VtopClient self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as VtopClientImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionManager(
    SessionManager self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SessionManagerImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
    VtopClient self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as VtopClientImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcJar(
    ArcJar self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ArcJarImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionManager(
    SessionManager self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SessionManagerImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
    VtopClient self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as VtopClientImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClientBuilder(
    VtopClientBuilder self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as VtopClientBuilderImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResult(
    VtopResult self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as VtopResultImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultAttendanceData(
    VtopResultAttendanceData self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as VtopResultAttendanceDataImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultExamScheduleData(
    VtopResultExamScheduleData self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as VtopResultExamScheduleDataImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultFullAttendanceData(
    VtopResultFullAttendanceData self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as VtopResultFullAttendanceDataImpl).frbInternalSseEncode(
        move: null,
      ),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultMarksData(
    VtopResultMarksData self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as VtopResultMarksDataImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultSemesterData(
    VtopResultSemesterData self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as VtopResultSemesterDataImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultTimetableData(
    VtopResultTimetableData self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as VtopResultTimetableDataImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecu8(
    VtopResultVecU8 self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as VtopResultVecU8Impl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_attendance_data(
    AttendanceData self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_attendance_record(self.records, serializer);
    sse_encode_String(self.semesterId, serializer);
    sse_encode_u_64(self.updateTime, serializer);
  }

  @protected
  void sse_encode_attendance_record(
    AttendanceRecord self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.serial, serializer);
    sse_encode_String(self.category, serializer);
    sse_encode_String(self.courseName, serializer);
    sse_encode_String(self.courseCode, serializer);
    sse_encode_String(self.courseType, serializer);
    sse_encode_String(self.facultyDetail, serializer);
    sse_encode_String(self.classesAttended, serializer);
    sse_encode_String(self.totalClasses, serializer);
    sse_encode_String(self.attendancePercentage, serializer);
    sse_encode_String(self.attendenceFatCat, serializer);
    sse_encode_String(self.debarStatus, serializer);
    sse_encode_String(self.courseId, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_vtop_config(
    VtopConfig self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_vtop_config(self, serializer);
  }

  @protected
  void sse_encode_exam_schedule_data(
    ExamScheduleData self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_per_exam_schedule_record(self.exams, serializer);
    sse_encode_String(self.semesterId, serializer);
    sse_encode_u_64(self.updateTime, serializer);
  }

  @protected
  void sse_encode_exam_schedule_record(
    ExamScheduleRecord self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.serial, serializer);
    sse_encode_String(self.slot, serializer);
    sse_encode_String(self.courseName, serializer);
    sse_encode_String(self.courseCode, serializer);
    sse_encode_String(self.courseType, serializer);
    sse_encode_String(self.courseId, serializer);
    sse_encode_String(self.examDate, serializer);
    sse_encode_String(self.examSession, serializer);
    sse_encode_String(self.reportingTime, serializer);
    sse_encode_String(self.examTime, serializer);
    sse_encode_String(self.venue, serializer);
    sse_encode_String(self.seatLocation, serializer);
    sse_encode_String(self.seatNo, serializer);
  }

  @protected
  void sse_encode_full_attendance_data(
    FullAttendanceData self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_full_attendance_record(self.records, serializer);
    sse_encode_String(self.semesterId, serializer);
    sse_encode_u_64(self.updateTime, serializer);
    sse_encode_String(self.courseId, serializer);
    sse_encode_String(self.courseType, serializer);
  }

  @protected
  void sse_encode_full_attendance_record(
    FullAttendanceRecord self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.serial, serializer);
    sse_encode_String(self.date, serializer);
    sse_encode_String(self.slot, serializer);
    sse_encode_String(self.dayTime, serializer);
    sse_encode_String(self.status, serializer);
    sse_encode_String(self.remark, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_list_attendance_record(
    List<AttendanceRecord> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_attendance_record(item, serializer);
    }
  }

  @protected
  void sse_encode_list_exam_schedule_record(
    List<ExamScheduleRecord> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_exam_schedule_record(item, serializer);
    }
  }

  @protected
  void sse_encode_list_full_attendance_record(
    List<FullAttendanceRecord> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_full_attendance_record(item, serializer);
    }
  }

  @protected
  void sse_encode_list_marks_record(
    List<MarksRecord> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_marks_record(item, serializer);
    }
  }

  @protected
  void sse_encode_list_marks_record_each(
    List<MarksRecordEach> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_marks_record_each(item, serializer);
    }
  }

  @protected
  void sse_encode_list_per_exam_schedule_record(
    List<PerExamScheduleRecord> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_per_exam_schedule_record(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_semester_info(
    List<SemesterInfo> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_semester_info(item, serializer);
    }
  }

  @protected
  void sse_encode_list_timetable_slot(
    List<TimetableSlot> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_timetable_slot(item, serializer);
    }
  }

  @protected
  void sse_encode_marks_data(MarksData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_marks_record(self.records, serializer);
    sse_encode_String(self.semesterId, serializer);
    sse_encode_u_64(self.updateTime, serializer);
  }

  @protected
  void sse_encode_marks_record(MarksRecord self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.serial, serializer);
    sse_encode_String(self.coursecode, serializer);
    sse_encode_String(self.coursetitle, serializer);
    sse_encode_String(self.coursetype, serializer);
    sse_encode_String(self.faculity, serializer);
    sse_encode_String(self.slot, serializer);
    sse_encode_list_marks_record_each(self.marks, serializer);
  }

  @protected
  void sse_encode_marks_record_each(
    MarksRecordEach self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.serial, serializer);
    sse_encode_String(self.markstitle, serializer);
    sse_encode_String(self.maxmarks, serializer);
    sse_encode_String(self.weightage, serializer);
    sse_encode_String(self.status, serializer);
    sse_encode_String(self.scoredmark, serializer);
    sse_encode_String(self.weightagemark, serializer);
    sse_encode_String(self.remark, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_bool(bool? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_bool(self, serializer);
    }
  }

  @protected
  void sse_encode_per_exam_schedule_record(
    PerExamScheduleRecord self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_exam_schedule_record(self.records, serializer);
    sse_encode_String(self.examType, serializer);
  }

  @protected
  void sse_encode_record_bool_string(
    (bool, String) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void sse_encode_semester_data(SemesterData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_semester_info(self.semesters, serializer);
    sse_encode_u_64(self.updateTime, serializer);
  }

  @protected
  void sse_encode_semester_info(SemesterInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.name, serializer);
  }

  @protected
  void sse_encode_timetable_data(TimetableData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_timetable_slot(self.slots, serializer);
    sse_encode_String(self.semesterId, serializer);
    sse_encode_u_64(self.updateTime, serializer);
  }

  @protected
  void sse_encode_timetable_slot(TimetableSlot self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.serial, serializer);
    sse_encode_String(self.day, serializer);
    sse_encode_String(self.slot, serializer);
    sse_encode_String(self.courseCode, serializer);
    sse_encode_String(self.courseType, serializer);
    sse_encode_String(self.roomNo, serializer);
    sse_encode_String(self.block, serializer);
    sse_encode_String(self.startTime, serializer);
    sse_encode_String(self.endTime, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_opt_box_autoadd_bool(self.isLab, serializer);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_vtop_config(VtopConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.baseUrl, serializer);
    sse_encode_u_64(self.timeoutSeconds, serializer);
    sse_encode_String(self.userAgent, serializer);
  }

  @protected
  void sse_encode_vtop_error(VtopError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case VtopError_NetworkError():
        sse_encode_i_32(0, serializer);
      case VtopError_VtopServerError():
        sse_encode_i_32(1, serializer);
      case VtopError_AuthenticationFailed(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_String(field0, serializer);
      case VtopError_RegistrationParsingError():
        sse_encode_i_32(3, serializer);
      case VtopError_InvalidCredentials():
        sse_encode_i_32(4, serializer);
      case VtopError_SessionExpired():
        sse_encode_i_32(5, serializer);
      case VtopError_ParseError(field0: final field0):
        sse_encode_i_32(6, serializer);
        sse_encode_String(field0, serializer);
      case VtopError_ConfigurationError(field0: final field0):
        sse_encode_i_32(7, serializer);
        sse_encode_String(field0, serializer);
      case VtopError_CaptchaRequired():
        sse_encode_i_32(8, serializer);
      case VtopError_InvalidResponse():
        sse_encode_i_32(9, serializer);
    }
  }
}

@sealed
class ArcJarImpl extends RustOpaque implements ArcJar {
  // Not to be used by end users
  ArcJarImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ArcJarImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ArcJar,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ArcJar,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ArcJarPtr,
  );
}

@sealed
class SessionManagerImpl extends RustOpaque implements SessionManager {
  // Not to be used by end users
  SessionManagerImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SessionManagerImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_SessionManager,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_SessionManager,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_SessionManagerPtr,
  );

  Future<void> clear() => RustLib.instance.api
      .crateApiVtopSessionManagerSessionManagerClear(that: this);

  Future<ArcJar> getCookieStore() => RustLib.instance.api
      .crateApiVtopSessionManagerSessionManagerGetCookieStore(that: this);

  Future<String?> getCsrfToken() => RustLib.instance.api
      .crateApiVtopSessionManagerSessionManagerGetCsrfToken(that: this);

  Future<bool> isAuthenticated() => RustLib.instance.api
      .crateApiVtopSessionManagerSessionManagerIsAuthenticated(that: this);

  Future<bool> isCookieExternal() => RustLib.instance.api
      .crateApiVtopSessionManagerSessionManagerIsCookieExternal(that: this);

  Future<void> setAuthenticated({required bool authenticated}) => RustLib
      .instance
      .api
      .crateApiVtopSessionManagerSessionManagerSetAuthenticated(
        that: this,
        authenticated: authenticated,
      );

  Future<void> setCookieExternal({required bool bool}) => RustLib.instance.api
      .crateApiVtopSessionManagerSessionManagerSetCookieExternal(
        that: this,
        bool: bool,
      );

  Future<void> setCookieFromExternal({
    required String url,
    required String cookie,
  }) => RustLib.instance.api
      .crateApiVtopSessionManagerSessionManagerSetCookieFromExternal(
        that: this,
        url: url,
        cookie: cookie,
      );

  Future<void> setCsrfFromExternal({required String token}) => RustLib
      .instance
      .api
      .crateApiVtopSessionManagerSessionManagerSetCsrfFromExternal(
        that: this,
        token: token,
      );

  Future<void> setCsrfToken({required String token}) =>
      RustLib.instance.api.crateApiVtopSessionManagerSessionManagerSetCsrfToken(
        that: this,
        token: token,
      );
}

@sealed
class VtopClientBuilderImpl extends RustOpaque implements VtopClientBuilder {
  // Not to be used by end users
  VtopClientBuilderImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  VtopClientBuilderImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_VtopClientBuilder,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_VtopClientBuilder,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_VtopClientBuilderPtr,
  );

  Future<VtopClient> build({
    required String username,
    required String password,
  }) => RustLib.instance.api.crateApiVtopVtopConfigVtopClientBuilderBuild(
    that: this,
    username: username,
    password: password,
  );
}

@sealed
class VtopClientImpl extends RustOpaque implements VtopClient {
  // Not to be used by end users
  VtopClientImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  VtopClientImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_VtopClient,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_VtopClient,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_VtopClientPtr,
  );

  Future<VtopResultAttendanceData> getAttendance({
    required String semesterId,
  }) => RustLib.instance.api.crateApiVtopVtopClientVtopClientGetAttendance(
    that: this,
    semesterId: semesterId,
  );

  Future<VtopResultVecU8> getCookie({required bool check}) => RustLib
      .instance
      .api
      .crateApiVtopVtopClientVtopClientGetCookie(that: this, check: check);

  Future<VtopResultExamScheduleData> getExamSchedule({
    required String semesterId,
  }) => RustLib.instance.api.crateApiVtopVtopClientVtopClientGetExamSchedule(
    that: this,
    semesterId: semesterId,
  );

  Future<VtopResultFullAttendanceData> getFullAttendance({
    required String semesterId,
    required String courseId,
    required String courseType,
  }) => RustLib.instance.api.crateApiVtopVtopClientVtopClientGetFullAttendance(
    that: this,
    semesterId: semesterId,
    courseId: courseId,
    courseType: courseType,
  );

  Future<VtopResultMarksData> getMarks({required String semesterId}) =>
      RustLib.instance.api.crateApiVtopVtopClientVtopClientGetMarks(
        that: this,
        semesterId: semesterId,
      );

  Future<VtopResultSemesterData> getSemesters({required bool check}) => RustLib
      .instance
      .api
      .crateApiVtopVtopClientVtopClientGetSemesters(that: this, check: check);

  Future<VtopResultTimetableData> getTimetable({required String semesterId}) =>
      RustLib.instance.api.crateApiVtopVtopClientVtopClientGetTimetable(
        that: this,
        semesterId: semesterId,
      );

  Future<bool> isAuthenticated() => RustLib.instance.api
      .crateApiVtopVtopClientVtopClientIsAuthenticated(that: this);

  Future<VtopResult> login() =>
      RustLib.instance.api.crateApiVtopVtopClientVtopClientLogin(that: this);

  Future<void> setCookie({required String cookie}) => RustLib.instance.api
      .crateApiVtopVtopClientVtopClientSetCookie(that: this, cookie: cookie);
}

@sealed
class VtopResultAttendanceDataImpl extends RustOpaque
    implements VtopResultAttendanceData {
  // Not to be used by end users
  VtopResultAttendanceDataImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  VtopResultAttendanceDataImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_increment_strong_count_VtopResultAttendanceData,
    rustArcDecrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_VtopResultAttendanceData,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_VtopResultAttendanceDataPtr,
  );
}

@sealed
class VtopResultExamScheduleDataImpl extends RustOpaque
    implements VtopResultExamScheduleData {
  // Not to be used by end users
  VtopResultExamScheduleDataImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  VtopResultExamScheduleDataImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_increment_strong_count_VtopResultExamScheduleData,
    rustArcDecrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_VtopResultExamScheduleData,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_VtopResultExamScheduleDataPtr,
  );
}

@sealed
class VtopResultFullAttendanceDataImpl extends RustOpaque
    implements VtopResultFullAttendanceData {
  // Not to be used by end users
  VtopResultFullAttendanceDataImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  VtopResultFullAttendanceDataImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_increment_strong_count_VtopResultFullAttendanceData,
    rustArcDecrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_VtopResultFullAttendanceData,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_VtopResultFullAttendanceDataPtr,
  );
}

@sealed
class VtopResultImpl extends RustOpaque implements VtopResult {
  // Not to be used by end users
  VtopResultImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  VtopResultImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_VtopResult,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_VtopResult,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_VtopResultPtr,
  );
}

@sealed
class VtopResultMarksDataImpl extends RustOpaque
    implements VtopResultMarksData {
  // Not to be used by end users
  VtopResultMarksDataImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  VtopResultMarksDataImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_increment_strong_count_VtopResultMarksData,
    rustArcDecrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_VtopResultMarksData,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_VtopResultMarksDataPtr,
  );
}

@sealed
class VtopResultSemesterDataImpl extends RustOpaque
    implements VtopResultSemesterData {
  // Not to be used by end users
  VtopResultSemesterDataImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  VtopResultSemesterDataImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_increment_strong_count_VtopResultSemesterData,
    rustArcDecrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_VtopResultSemesterData,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_VtopResultSemesterDataPtr,
  );
}

@sealed
class VtopResultTimetableDataImpl extends RustOpaque
    implements VtopResultTimetableData {
  // Not to be used by end users
  VtopResultTimetableDataImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  VtopResultTimetableDataImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_increment_strong_count_VtopResultTimetableData,
    rustArcDecrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_VtopResultTimetableData,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_VtopResultTimetableDataPtr,
  );
}

@sealed
class VtopResultVecU8Impl extends RustOpaque implements VtopResultVecU8 {
  // Not to be used by end users
  VtopResultVecU8Impl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  VtopResultVecU8Impl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_VtopResultVecU8,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_VtopResultVecU8,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_VtopResultVecU8Ptr,
  );
}

// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:meta/meta.dart' as meta;
import 'vtop/types.dart';
import 'vtop/vtop_client.dart';
import 'vtop/vtop_errors.dart';

VtopClient getVtopClient({
  required String username,
  required String password,
  String? cookie,
}) => RustLib.instance.api.crateApiVtopGetClientGetVtopClient(
  username: username,
  password: password,
  cookie: cookie,
);

Future<void> vtopClientLogin({required VtopClient client}) =>
    RustLib.instance.api.crateApiVtopGetClientVtopClientLogin(client: client);

Future<SemesterData> fetchSemesters({required VtopClient client}) =>
    RustLib.instance.api.crateApiVtopGetClientFetchSemesters(client: client);

Future<AttendanceData> fetchAttendance({
  required VtopClient client,
  required String semesterId,
}) => RustLib.instance.api.crateApiVtopGetClientFetchAttendance(
  client: client,
  semesterId: semesterId,
);

Future<FullAttendanceData> fetchFullAttendance({
  required VtopClient client,
  required String semesterId,
  required String courseId,
  required String courseType,
}) => RustLib.instance.api.crateApiVtopGetClientFetchFullAttendance(
  client: client,
  semesterId: semesterId,
  courseId: courseId,
  courseType: courseType,
);

Future<TimetableData> fetchTimetable({
  required VtopClient client,
  required String semesterId,
}) => RustLib.instance.api.crateApiVtopGetClientFetchTimetable(
  client: client,
  semesterId: semesterId,
);

Future<MarksData> fetchMarks({
  required VtopClient client,
  required String semesterId,
}) => RustLib.instance.api.crateApiVtopGetClientFetchMarks(
  client: client,
  semesterId: semesterId,
);

Future<ExamScheduleData> fetchExamShedule({
  required VtopClient client,
  required String semesterId,
}) => RustLib.instance.api.crateApiVtopGetClientFetchExamShedule(
  client: client,
  semesterId: semesterId,
);

Future<Uint8List> fetchCookies({required VtopClient client}) =>
    RustLib.instance.api.crateApiVtopGetClientFetchCookies(client: client);

Future<bool> fetchIsAuth({required VtopClient client}) =>
    RustLib.instance.api.crateApiVtopGetClientFetchIsAuth(client: client);

Future<(bool, String)> fetchWifi({
  required String username,
  required String password,
  required int i,
}) => RustLib.instance.api.crateApiVtopGetClientFetchWifi(
  username: username,
  password: password,
  i: i,
);
